void bubblesort(string * a, int n) {
	bool swapped = true;
	for (int i = 0; i < n - 1 && swapped; i++) {
		swapped = false;
		for (int j = n - 1; j > i; j--) {
			if (a[j] <= a[j - 1]) {
				swap(a[j], a[j - 1]);
				swapped = true;
			}
		}
	}

}


void ordenaFeM(identidade * filadeespera, Mesa * mesas) { //Para ordenadar a fila de espera e as mesas por ordem alfabética do último nome separadamente
	identidade * auxF = filadeespera;
	identidade * auxF2 = filadeespera;
	
	Mesa * auxM2 = mesas ;
	
	Mesa * auxM3 = mesas;
	
	int nFiladeespera = 0;
	int nMesas = 0;
	int f = 0;
	int m = 0;
	while (auxF!=NULL) { //Contando o nº de elementos da fila de espera
			
			auxF = auxF->seguinte;
			nFiladeespera++;
		
	}
	
	cout<< "Fila Desordenada: " << endl; //
	cout << " /t" <<endl;
	string * array = new string[nFiladeespera]; //Criando um array dinâmico com o tamanho da fila de espera
	while (auxF2 != NULL) {  // Passa os últimos nome dos membros da fila de espera para o array
		array[f] = auxF2->ultimonome;
		f++;
		auxF2 = auxF2->seguinte;
		
	}
	for (int j = 0; j < nFiladeespera; j++) { // Imprime o array da fila de espera tal como foi inserido (desordenada)
		cout << array[j] << endl;
	}
	cout << "Fila Ordenada:" << endl;
	cout << " /t" << endl;
	bubblesort(array, nFiladeespera); //Ordena o array da fila de espera
	for (int j = 0; j < nFiladeespera; j++) {  // Imprime o array ordenado
			cout << array[j] << endl;
		}

		

	identidade * auxdelete = auxM2->pessoas;


	while (auxM2 != NULL  ) {   //Passa  os últimos nomes das mesas para o array
		
		if (auxdelete != NULL  ) { //Ve mesa a mesa
			auxdelete = auxdelete->seguinte;
			nMesas++;
			
		}
		
		else if (auxM2->seguinte == NULL) //Verifica se a próxima mesa é a última para não sair fora da lista ligada o auxdelete
		{
			auxM2 = auxM2->seguinte;
			delete auxdelete;
		}

		else if ( auxM2 !=NULL) { // Passa para a mesa seguinte
			delete auxdelete;
			
			auxM2 = auxM2->seguinte;
			auxdelete = auxM2->pessoas;
			
			
		}
	
	}

	cout << nMesas <<endl;
	string * array2 = new string[nMesas];


	cout << "Mesas Desordenadas: " << endl;

	identidade * auxdelete2 = auxM3->pessoas;

	while (auxM3 != NULL) {   //Passa  os últimos nomes das mesas para o array

		if (auxdelete2 != NULL) { //Ve mesa a mesa
			array2[m] = auxdelete2->ultimonome;
			auxdelete2 = auxdelete2->seguinte;
			m++;

		}

		else if (auxM3->seguinte == NULL) //Verifica se a próxima mesa é a última para não sair fora da lista ligada o auxdelete
		{
			auxM3 = auxM3->seguinte;
			delete auxdelete2;
		}

		else if (auxM3 != NULL) { // Passa para a mesa seguinte
			delete auxdelete2;

			auxM3 = auxM3->seguinte;
			auxdelete2 = auxM3->pessoas;


		}

	}
	for (int j = 0; j < nMesas; j++) { //Imprime o array das pessoas da mesa desordenadas
		cout << array2[j] << endl;
	}
	cout << "Mesas Desordenadas :" << endl;
	cout << " /t" << endl;
	bubblesort(array2, nMesas); //Ordena o array das pessoas da mesa desordenadas

	cout << "Mesas Ordenadas: " << endl; 
	cout << " /t" << endl;
	
	for (int j = 0; j < nMesas; j++) {  //Imprime o array das pessoas da mesa ordenadas
		cout << array2[j] << endl;
	}
	
	delete auxF;
	delete auxF2;

	delete auxM2;
	delete auxM3;
 }